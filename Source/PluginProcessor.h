/*
  ==============================================================================

	This file was auto-generated by the Introjucer!

	It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Custom\FloatParameter.h"
#include "Custom\Synth.h"
#include "Custom\TransDirectFormIIFilter.h"

//==============================================================================
/**
*/
class SynthesizerAudioProcessor  : public AudioProcessor
{
public:
	//==============================================================================
	SynthesizerAudioProcessor();
	~SynthesizerAudioProcessor();

	//==============================================================================
	void prepareToPlay (double sampleRate, int samplesPerBlock) override;
	void releaseResources() override;

	void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

	//==============================================================================
	AudioProcessorEditor* createEditor() override;
	bool hasEditor() const override					{ return true; }

	//==============================================================================
	const String getName() const override			{ return JucePlugin_Name; }
	const String getInputChannelName (int channelIndex) const override;
	const String getOutputChannelName (int channelIndex) const override;
	bool isInputChannelStereoPair (int index) const override;
	bool isOutputChannelStereoPair (int index) const override;

	bool acceptsMidi() const override;
	bool producesMidi() const override;
	bool silenceInProducesSilenceOut() const override;
	double getTailLengthSeconds() const override;

	//==============================================================================
	int getNumPrograms() override										{return 1; }
	int getCurrentProgram() override									{ return 0; }
	void setCurrentProgram(int index) override							{}
	const String getProgramName(int index) override						{ return "Default"; }
	void changeProgramName(int index, const String& newName) override	{}

	//==============================================================================
	void getStateInformation (MemoryBlock& destData) override;
	void setStateInformation (const void* data, int sizeInBytes) override;

	//==============================================================================
	// These properties are public so that the editor component can access them

	// This is kept up to date with the MIDI messages that arrive, and the UI component
	// registers with it so it can represent the incoming messages
	MidiKeyboardState keyboardState;

	// this keeps a copy of the last set of time info that was acquired during an audio
	// callback - the UI component will read this and display it.
	AudioPlayHead::CurrentPositionInfo lastPosInfo;

	// Used to persist the UI's size. The UI will update them (along with other 
	// parameters) when it gets resized.
	int lastUIWidth, lastUIHeight;

	// Parameters
	AudioProcessorParameter* outputGain;	// Gain for the whole output
	AudioProcessorParameter* semitones;		// Tune the synth in semitones
	AudioProcessorParameter* cents;			// Tune the synth in cents
	AudioProcessorParameter* filterType;	// Filter's type (LP, BP, HP, Notch, etc.)
	AudioProcessorParameter* cutoff;		// Filter's cutoff in pitch (MIDI)
	AudioProcessorParameter* resonance;		// Filter's resonance (0-1)
	AudioProcessorParameter* peakGaindB;	// Filter's peak gain (for Peak, HS, LS)

private:
	//==============================================================================
	Synthesiser synth;
	TransDirectFormIIFilter directFormFilter;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SynthesizerAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
